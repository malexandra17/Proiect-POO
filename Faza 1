
	
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>

#include <string>
using namespace std;
class coloana
{private:
	char* nume_coloana;
	string tip;
	int dimensiune;

  
public:
	coloana()
	{
		 nume_coloana = nullptr;
		tip="";
		 dimensiune=0;

	}
	coloana(const char* nume_coloana, string tip, int dimensiune)
	{
		this->nume_coloana = new char[strlen(nume_coloana  ) + 1];
		strcpy_s(this->nume_coloana, strlen(nume_coloana) + 1, nume_coloana);
		

		this->dimensiune = dimensiune;
		this->tip = tip;
		
	}
	coloana(const coloana& c)
	{

		this->nume_coloana = new char[strlen(c.nume_coloana) + 1];
		strcpy_s(this->nume_coloana, strlen(c.nume_coloana) + 1, c.nume_coloana);
		

		this->dimensiune = c.dimensiune;
		this->tip = c.tip;

	}
	~coloana()
	{
		if (nume_coloana != nullptr)
			delete[] nume_coloana;
	}
	coloana& operator=(const coloana& c)
	{
		if (nume_coloana != nullptr)
			delete[] nume_coloana;
		this->nume_coloana = new char[strlen(c.nume_coloana) + 1];
		strcpy_s(this->nume_coloana, strlen(c.nume_coloana) + 1, c.nume_coloana);
		

		this->dimensiune = c.dimensiune;
		this->tip = c.tip;
		return *this;

	}
	string get_tip()
		{
		return tip;
		}
	string get_denumire_coloana()
	{
		return nume_coloana;
	}
	

};
template<typename T>
class valori_coloana:public coloana
{private:
	int nr_valori;
	T valoare_default;
	T* valori;

public:
	valori_coloana(T valoare_default)
	{
		this->valoare_default = valoare_default;
	}
	void set_valoare(T valoare_default)
	{
		this->valoare_default = valoare_default;
	}
	void insert(T valoare)
	{
		T* copie = new T[nr_valori+1];
		for (int i = 0;i < nr_valori;i++)
			copie[i] = valori[i];
		nr_valori++;
		copie[nr_valori - 1] = valoare;
		delete[] valori;
		valori = new T[nr_valori];
		for (int i = 0;i < nr_valori;i++)
			valori[i] = copie[i];
		delete[]copie;
	}
	int get_nr_valori()
	{
		return nr_valori;
	}



};

class tabela
{private:
	string nume_tabela;
	coloana* c;
	/*valori_coloana<int>* valori_int;
	valori_coloana<string>* valori_string;
	valori_coloana<float>* valori_float;*/
	int nr_coloane;
	
public:
	tabela()
	{
		nume_tabela = "";
		c = nullptr;
		nr_coloane = 0;
	}
	tabela(string nume_tabela,int nr_coloane,coloana* c)
	{
		this->nume_tabela = nume_tabela;
		this->nr_coloane = nr_coloane;
		this->c = new coloana[nr_coloane];
		for (int i = 0;i < nr_coloane;i++)
			this->c[i] = c[i];
	}
	tabela(string nume_tabel)
	{
		this->nume_tabela = nume_tabel;
		c = nullptr;
		nr_coloane = 0;
	}
	int get_nr_coloane()
	{
		return nr_coloane;
	}
	string get_nume_tabela()
	{
		return  nume_tabela;
	}
	tabela (const tabela& t)
	{
		nume_tabela = t.nume_tabela;
		nr_coloane = t.nr_coloane;
		c = new coloana[nr_coloane];
		for (int i = 0;i < nr_coloane;i++)
			c[i] = t.c[i];
	}
	~tabela()
	{
		if(c!=nullptr)
			    delete[] c;
		

	}
	tabela& operator=(const tabela& t)
	{
		if (c != nullptr)
		
			delete[] c;
	
		
		
		nume_tabela = t.nume_tabela;
		nr_coloane = t.nr_coloane;
		c = new coloana[nr_coloane];
		for (int i = 0;i < nr_coloane;i++)
			c[i] = t.c[i];
		return *this;
	}
	void adauga_coloana(coloana col_nou)
	{
		coloana* copie = new coloana[nr_coloane + 1];
		for (int i = 0;i < nr_coloane;i++)
			copie[i] = c[i];
		copie[nr_coloane] = col_nou;
		delete[] c;
		c = nullptr;
		nr_coloane++;
		c = new coloana[nr_coloane];
		for (int i = 0;i < nr_coloane;i++)
			c[i] = copie[i];
		delete[] copie;
	}
	string get_denumiri_coloane(int i)
	{
		return c[i].get_denumire_coloana();
	}
	void set_vectori_valori_coloana_i_int(valori_coloana <int>val_col)
	{
		
	}
	void set_vectori_valori_coloana_i_string(valori_coloana <string>val_col)
	{

	}
	void set_vectori_valori_coloana_i_float(valori_coloana <float>val_col)
	{

	}
	
};

class baza_de_date
{
private:
	int nr_tabele;
	tabela* t;
public:
	baza_de_date()
	{
		nr_tabele = 0;
		t = nullptr;
	}
	baza_de_date(const baza_de_date& b)
	{
		this->nr_tabele = b.nr_tabele;;
		this->t = new tabela[nr_tabele];
		for (int i = 0;i < nr_tabele;i++)
			this->t[i] = b.t[i];
	}
	~baza_de_date()
	{
		if (t != nullptr)
			delete[] t;

	}
	baza_de_date& operator=(const baza_de_date& b)
	{
		if (t != nullptr)
			delete[] t;
		this->nr_tabele = b.nr_tabele;;
		this->t = new tabela[nr_tabele];
		for (int i = 0;i < nr_tabele;i++)
			this->t[i] = b.t[i];
		return *this;
	}

	void adauga_tabela( tabela tab_nou)
	{
		if (t != nullptr)
		{
			tabela* copie_t = new tabela[nr_tabele + 1];
			for (int i = 0;i < nr_tabele;i++)
				copie_t[i] = t[i];

			copie_t[nr_tabele] = tab_nou;

			delete[] t;
			t = nullptr;
			nr_tabele++;
			t = new tabela[nr_tabele];
			
			for (int i = 0;i < nr_tabele;i++)
				t[i] = copie_t[i];
			delete[] copie_t;
		}
		else {
			t = new tabela[1];
			t[0] = tab_nou;
			nr_tabele++;
		}


	}
	void stergere_tabela(string nume_tabela)
	{
		tabela* copie = new tabela[nr_tabele-1];
		for (int i = 0;i < nr_tabele;i++)
			if(t[i].get_nume_tabela()!=nume_tabela) copie[i] = t[i];
		
		nr_tabele--;
		delete[] t;
		t = new tabela[nr_tabele];
		for (int i = 0;i < nr_tabele;i++)
			t[i] = copie[i];
		delete[] copie;

	}
	int get_nr_tabele()
	{
		return nr_tabele;
	}
	string get_nume_tabela_i(int i)
	{
		return t[i].get_nume_tabela();
	}
	int get_nr_coloane_tabela_i(int i)
	{
		return t[i].get_nr_coloane();
	}
  string get_denumire_coloane_tabela_i(int i, int k)
	{
		return t[i].get_denumiri_coloane(k);
	}


};
class comanda
{
	baza_de_date bd;
	string c;
};


int main() 
{

	baza_de_date bd;
	//bd.adauga_tabela(t);
	char comanda[200], sep[] = " ,)(;", *p, v[200][20];
	int k=0;
	cin.getline(comanda, 200);
	p = strtok(comanda, sep);
	
	while (p != NULL)
	{
		strcpy_s(v[k++], strlen(p) + 1, p);
		p = strtok(NULL, sep);
		
	}
	
	//DISPLAY TABLE table_name
	
	if (strcmp(v[0],"DISPLAY")==0)
	{
		string nume_tabela = v[2];
		
		for (int i = 0;i < bd.get_nr_tabele();i++)
			if (bd.get_nume_tabela_i(i) == nume_tabela)
				for (int k = 0;k < bd.get_nr_coloane_tabela_i(i);k++)
					cout << bd.get_denumire_coloane_tabela_i(i, k) << " ";

	}
	//DROP TABEL TABLE_NAME
	if (strcmp(v[0], "DROP")==0)
	{
		string nume_tabela=v[2];
		for (int i = 0;i < bd.get_nr_tabele();i++)
			if (bd.get_nume_tabela_i(i) == nume_tabela)
				bd.stergere_tabela(nume_tabela);
		cout << "tabela a fost stearsa";
		cout << bd.get_nr_tabele();
		
	}
	//create tabel
	if (strcmp(v[0], "CREATE") == 0)
	{
		tabela* t = new tabela(v[2]);
		for (int i = 3;i < k;i = i + 4)
		{
			coloana* col_nou = new coloana(v[i], v[i + 1], atoi(v[i + 2]));
			if (strcmp(v[i + 1], "text") == 0)
				valori_coloana<string>* val_col = new valori_coloana<string>(v[i + 3]);
			if (strcmp(v[i + 1], "intger") == 0)
				valori_coloana<int>* val_col = new valori_coloana<int>(atoi(v[i + 3]));
			else
				valori_coloana<float>* val_col = new valori_coloana<float>(atof(v[i + 3]));
			t->adauga_coloana(*col_nou);
			delete col_nou;
		}
		bd.adauga_tabela(*t);
		
		delete t;
	}

	
}


//sunt doar niste idei-- mai e mult de schimbat 
